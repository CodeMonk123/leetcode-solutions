# -*- coding: utf-8 -*-
# @Date    : 2021-12-11 14:48:25
# @Author  : CodeMonk123

from typing import List
from typing import Dict, Tuple
import copy

class Solution:
    def bfs(self, grid:List[List[str]], x,y, visited):
        q = [(x,y)]
        visited.add((x,y))
        while True:
            if len(q) == 0:
                break
            i,j = q.pop(0)
            candidates = []
            if i > 0:
                candidates.append((i-1,j))
            if i < len(grid) - 1:
                candidates.append((i+1,j))
            if j > 0:
                candidates.append((i,j-1))
            if j < len(grid[0]) - 1:
                candidates.append((i,j+1))
            for candidiate in candidates:
                if grid[candidiate[0]][candidiate[1]]=='1' and candidiate not in visited:
                    visited.add(candidiate)
                    q.append(candidiate)

    def numIslands(self, grid: List[List[str]]) -> int:
        visited = set()
        m,n = len(grid), len(grid[0])
        count_1 = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    count_1 += 1
        
        num_islands = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1' and (i,j) not in visited:
                    self.bfs(grid, i,j,visited)
                    num_islands += 1
                        
        return num_islands

solution = Solution()
grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]

grid2 = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]

grid3 = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]


# print(solution.numIslands(grid))
# print(solution.numIslands(grid2))
print(solution.numIslands(grid3))